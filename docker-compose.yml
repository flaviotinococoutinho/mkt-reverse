version: '3.8'

services:
  # Database Services
  postgres-main:
    image: postgres:16-alpine
    container_name: mkt-reverse-postgres-main
    environment:
      POSTGRES_DB: marketplace_main
      POSTGRES_USER: marketplace_user
      POSTGRES_PASSWORD: marketplace_pass
      POSTGRES_MULTIPLE_DATABASES: user_management,sourcing_management,supplier_management,contract_management,analytics
    ports:
      - "5432:5432"
    volumes:
      - postgres_main_data:/var/lib/postgresql/data
      - ./docker/postgres/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh:ro
      - ./docker/postgres/init-schemas.sql:/docker-entrypoint-initdb.d/init-schemas.sql:ro
    networks:
      - marketplace-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U marketplace_user -d marketplace_main"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-events:
    image: postgres:16-alpine
    container_name: mkt-reverse-postgres-events
    environment:
      POSTGRES_DB: marketplace_events
      POSTGRES_USER: events_user
      POSTGRES_PASSWORD: events_pass
    ports:
      - "5433:5432"
    volumes:
      - postgres_events_data:/var/lib/postgresql/data
      - ./docker/postgres/init-event-store.sql:/docker-entrypoint-initdb.d/init-event-store.sql:ro
    networks:
      - marketplace-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U events_user -d marketplace_events"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: mkt-reverse-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - marketplace-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Message Broker - Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: mkt-reverse-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - marketplace-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: mkt-reverse-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - marketplace-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka UI for Development
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: mkt-reverse-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: marketplace-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - marketplace-network

  # Search Engine - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: mkt-reverse-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - marketplace-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for Elasticsearch
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: mkt-reverse-kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - marketplace-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: mkt-reverse-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - marketplace-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:10.2.0
    container_name: mkt-reverse-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - marketplace-network

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: mkt-reverse-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - marketplace-network

  # MinIO for Object Storage (S3 Compatible)
  minio:
    image: minio/minio:RELEASE.2023-12-07T04-16-00Z
    container_name: mkt-reverse-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - marketplace-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Mailhog for Email Testing
  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: mkt-reverse-mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - marketplace-network

  # Nginx for Load Balancing and Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: mkt-reverse-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api-gateway
    networks:
      - marketplace-network

  # Application Services
  api-gateway:
    build:
      context: .
      dockerfile: application/api-gateway/Dockerfile
    container_name: mkt-reverse-api-gateway
    ports:
      - "8081:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-main:5432/marketplace_main
      SPRING_DATASOURCE_USERNAME: marketplace_user
      SPRING_DATASOURCE_PASSWORD: marketplace_pass
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      ELASTICSEARCH_HOSTS: elasticsearch:9200
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    depends_on:
      postgres-main:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - marketplace-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # User Management Service
  user-management:
    build:
      context: .
      dockerfile: modules/user-management/Dockerfile
    container_name: mkt-reverse-user-management
    ports:
      - "8082:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-main:5432/user_management
      SPRING_DATASOURCE_USERNAME: marketplace_user
      SPRING_DATASOURCE_PASSWORD: marketplace_pass
      SPRING_REDIS_HOST: redis
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    depends_on:
      postgres-main:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - marketplace-network
    volumes:
      - ./logs:/app/logs

  # Sourcing Management Service
  sourcing-management:
    build:
      context: .
      dockerfile: modules/sourcing-management/Dockerfile
    container_name: mkt-reverse-sourcing-management
    ports:
      - "8083:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-main:5432/sourcing_management
      SPRING_DATASOURCE_USERNAME: marketplace_user
      SPRING_DATASOURCE_PASSWORD: marketplace_pass
      SPRING_REDIS_HOST: redis
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      ELASTICSEARCH_HOSTS: elasticsearch:9200
    depends_on:
      postgres-main:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - marketplace-network
    volumes:
      - ./logs:/app/logs

volumes:
  postgres_main_data:
    driver: local
  postgres_events_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local

networks:
  marketplace-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

